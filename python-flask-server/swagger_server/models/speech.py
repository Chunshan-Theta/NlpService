# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Speech(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, source: str=None, topic: str=None):  # noqa: E501
        """Speech - a model defined in Swagger

        :param source: The source of this Speech.  # noqa: E501
        :type source: str
        :param topic: The topic of this Speech.  # noqa: E501
        :type topic: str
        """
        self.swagger_types = {
            'source': str,
            'topic': str
        }

        self.attribute_map = {
            'source': 'source',
            'topic': 'topic'
        }

        self._source = source
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt) -> 'Speech':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The speech of this Speech.  # noqa: E501
        :rtype: Speech
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> str:
        """Gets the source of this Speech.


        :return: The source of this Speech.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this Speech.


        :param source: The source of this Speech.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def topic(self) -> str:
        """Gets the topic of this Speech.


        :return: The topic of this Speech.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic: str):
        """Sets the topic of this Speech.


        :param topic: The topic of this Speech.
        :type topic: str
        """

        self._topic = topic
