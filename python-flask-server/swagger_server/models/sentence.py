# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.word import Word  # noqa: F401,E501
from swagger_server import util


class Sentence(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, source: str=None, word_array: List[Word]=None, top10: List[Word]=None, emotion: float=None):  # noqa: E501
        """Sentence - a model defined in Swagger

        :param source: The source of this Sentence.  # noqa: E501
        :type source: str
        :param word_array: The word_array of this Sentence.  # noqa: E501
        :type word_array: List[Word]
        :param top10: The top10 of this Sentence.  # noqa: E501
        :type top10: List[Word]
        :param emotion: The emotion of this Sentence.  # noqa: E501
        :type emotion: float
        """
        self.swagger_types = {
            'source': str,
            'word_array': List[Word],
            'top10': List[Word],
            'emotion': float
        }

        self.attribute_map = {
            'source': 'source',
            'word_array': 'wordArray',
            'top10': 'top10',
            'emotion': 'emotion'
        }

        self._source = source
        self._word_array = word_array
        self._top10 = top10
        self._emotion = emotion

    @classmethod
    def from_dict(cls, dikt) -> 'Sentence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sentence of this Sentence.  # noqa: E501
        :rtype: Sentence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> str:
        """Gets the source of this Sentence.


        :return: The source of this Sentence.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this Sentence.


        :param source: The source of this Sentence.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def word_array(self) -> List[Word]:
        """Gets the word_array of this Sentence.


        :return: The word_array of this Sentence.
        :rtype: List[Word]
        """
        return self._word_array

    @word_array.setter
    def word_array(self, word_array: List[Word]):
        """Sets the word_array of this Sentence.


        :param word_array: The word_array of this Sentence.
        :type word_array: List[Word]
        """

        self._word_array = word_array

    @property
    def top10(self) -> List[Word]:
        """Gets the top10 of this Sentence.


        :return: The top10 of this Sentence.
        :rtype: List[Word]
        """
        return self._top10

    @top10.setter
    def top10(self, top10: List[Word]):
        """Sets the top10 of this Sentence.


        :param top10: The top10 of this Sentence.
        :type top10: List[Word]
        """

        self._top10 = top10

    @property
    def emotion(self) -> float:
        """Gets the emotion of this Sentence.


        :return: The emotion of this Sentence.
        :rtype: float
        """
        return self._emotion

    @emotion.setter
    def emotion(self, emotion: float):
        """Sets the emotion of this Sentence.


        :param emotion: The emotion of this Sentence.
        :type emotion: float
        """

        self._emotion = emotion
